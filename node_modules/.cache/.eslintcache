[{"/Users/amymathews/Desktop/TicketingManagementSystem-UI/src/index.tsx":"1","/Users/amymathews/Desktop/TicketingManagementSystem-UI/src/reportWebVitals.ts":"2","/Users/amymathews/Desktop/TicketingManagementSystem-UI/src/App.tsx":"3","/Users/amymathews/Desktop/TicketingManagementSystem-UI/src/Home.tsx":"4","/Users/amymathews/Desktop/TicketingManagementSystem-UI/src/StaffStudentHome.tsx":"5","/Users/amymathews/Desktop/TicketingManagementSystem-UI/src/AuthProvider.tsx":"6","/Users/amymathews/Desktop/TicketingManagementSystem-UI/src/ProtectedRoute.tsx":"7","/Users/amymathews/Desktop/TicketingManagementSystem-UI/src/login.tsx":"8","/Users/amymathews/Desktop/TicketingManagementSystem-UI/src/TicketForm.tsx":"9","/Users/amymathews/Desktop/TicketingManagementSystem-UI/src/HomeTickets.tsx":"10","/Users/amymathews/Desktop/TicketingManagementSystem-UI/src/AssignedTickets.tsx":"11","/Users/amymathews/Desktop/TicketingManagementSystem-UI/src/OpenTickets.tsx":"12","/Users/amymathews/Desktop/TicketingManagementSystem-UI/src/StaffHome.tsx":"13","/Users/amymathews/Desktop/TicketingManagementSystem-UI/src/AssignedTicketList.tsx":"14","/Users/amymathews/Desktop/TicketingManagementSystem-UI/src/TicketList.tsx":"15","/Users/amymathews/Desktop/TicketingManagementSystem-UI/src/StaffOpenTickets.tsx":"16","/Users/amymathews/Desktop/TicketingManagementSystem-UI/src/StaffAssignedTickets.tsx":"17","/Users/amymathews/Desktop/TicketingManagementSystem-UI/src/StaffAssignedTicketList.tsx":"18","/Users/amymathews/Desktop/TicketingManagementSystem-UI/src/StaffOpenTicketList.tsx":"19"},{"size":554,"mtime":1697062210300,"results":"20","hashOfConfig":"21"},{"size":425,"mtime":1696478445250,"results":"22","hashOfConfig":"21"},{"size":1091,"mtime":1696478445248,"results":"23","hashOfConfig":"21"},{"size":2835,"mtime":1697086664514,"results":"24","hashOfConfig":"21"},{"size":2812,"mtime":1696478445249,"results":"25","hashOfConfig":"21"},{"size":772,"mtime":1696478445249,"results":"26","hashOfConfig":"21"},{"size":732,"mtime":1696478445249,"results":"27","hashOfConfig":"21"},{"size":4108,"mtime":1696478445250,"results":"28","hashOfConfig":"21"},{"size":4442,"mtime":1697081533093,"results":"29","hashOfConfig":"21"},{"size":1538,"mtime":1697899672101,"results":"30","hashOfConfig":"21"},{"size":3301,"mtime":1696478445248,"results":"31","hashOfConfig":"21"},{"size":2514,"mtime":1696478445249,"results":"32","hashOfConfig":"21"},{"size":2450,"mtime":1696478445249,"results":"33","hashOfConfig":"21"},{"size":3430,"mtime":1697094999028,"results":"34","hashOfConfig":"21"},{"size":3149,"mtime":1697899978677,"results":"35","hashOfConfig":"21"},{"size":2618,"mtime":1696478445249,"results":"36","hashOfConfig":"21"},{"size":3449,"mtime":1696478445249,"results":"37","hashOfConfig":"21"},{"size":5711,"mtime":1697062210299,"results":"38","hashOfConfig":"21"},{"size":5832,"mtime":1697062210300,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"7eoy6q",{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"43"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"43"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"43"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"43"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"43"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"43"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"43"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"43"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"43"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"43"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"43"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"43"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"43"},"/Users/amymathews/Desktop/TicketingManagementSystem-UI/src/index.tsx",[],[],["111"],"/Users/amymathews/Desktop/TicketingManagementSystem-UI/src/reportWebVitals.ts",[],[],"/Users/amymathews/Desktop/TicketingManagementSystem-UI/src/App.tsx",["112","113","114","115","116","117","118","119"],[],"import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TicketForm from './TicketForm';\nimport OpenTickets from './OpenTickets';\nimport Login from './login';\nimport Home from './Home';\nimport StaffHome from './StaffHome';\nimport { BrowserRouter, Navigate, Route, Router, Routes, useNavigate } from 'react-router-dom';\nimport ProtectedRoute from './ProtectedRoute';\nimport { AuthProvider, useAuth } from './AuthProvider';\nimport StaffStudentHome from './StaffStudentHome';\n\n\nfunction App() {\n\n\n  return (\n    <div className=\"App\">\n      <>\n      <AuthProvider>\n        <BrowserRouter>\n        <Routes>\n            <Route path = \"/\" element = {<Home/>}/>\n            <Route path = \"/login\" element={<Login/>} />\n            <Route path = \"/staffHome\" element={<ProtectedRoute/>} />\n            <Route path = \"/staffStudentHome\" element = {<StaffStudentHome/>}/>\n            <Route path = \"*\" element ={<Navigate to =\"/\"/>}></Route>\n          </Routes>\n        </BrowserRouter>\n      </AuthProvider>\n\n      </>\n    </div>\n\n  );\n}\n\nexport default App;\n","/Users/amymathews/Desktop/TicketingManagementSystem-UI/src/Home.tsx",["120","121","122","123","124","125","126","127"],[],"import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TicketForm from './TicketForm';\nimport OpenTickets from './OpenTickets';\nimport Login from './login';\nimport { useNavigate } from 'react-router-dom';\nimport AssignedTickets from './AssignedTickets';\nimport HomeTickets from './HomeTickets';\n\nconst Home = () => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  // Your login logic here\n  const handleLogin = () => {\n    // Implement your login logic here (e.g., check credentials)\n    // If login is successful, set 'isLoggedIn' to true\n    setIsLoggedIn(true);\n  };\n\n  class Ticket {\n    public studentID: string | undefined;\n    public studentName: string | undefined;\n    public ticketType: string | undefined;\n    public description: string | undefined;\n    public location: string | undefined;\n    public currentDate: Date | undefined;\n  }\n\n  const navigate = useNavigate();\n  const [tickets, setTickets] = useState<Ticket[]>([]); \n\n  const handleTicketSubmit = (ticket:Ticket) => {\n    setTickets((prevTickets:Ticket[]) => [...prevTickets, ticket]);\n};\n\n  return (\n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //     {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n    //     <p>\n    //       Edit <code>src/App.tsx</code> and save to reload.\n    //     </p>\n\n    //   </header>\n    // </div>\n\n    \n    <div className=\"App\">\n\n      {/* <header style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n      <h1 style={{ textAlign: 'center', flex: '1' }} onClick = {() => navigate(\"/\")}>ME100</h1>\n        <button style={{ marginRight: '10px' }} onClick = {() => navigate('/login')} >Staff Login</button>\n      </header> */}\n      <header className=\"header\">\n        <h1 onClick={() => navigate(\"/\")}> ME100</h1>\n        <button style={{ marginRight: '10px' }} onClick={() => navigate('/login')}>Staff Login</button>\n      </header>\n\n     <div>\n      <p style={{ fontSize: '1.5rem' }}>\n                Welcome to ME 100 OH Queue. Please make a ticket on the queue\n      </p>\n      <p style={{ fontSize: '1 rem', color:'darkgreen', fontWeight: 700, padding: 30}}>\n                Please note that creating a ticket acknowledges that we gather your information to help you with your problem. \n                We will not share your information with anyone outside of the ME 100 staff.\n      </p>\n\n      <TicketForm/>\n      <HomeTickets/>\n      <div className=\"ticket-list-container\">\n        {/* <div className=\"ticket-list left-half\">\n          <h3>Open Tickets</h3>\n          <OpenTickets/>\n        </div>\n        <div className=\"ticket-list right-half\">\n          <h3>Assigned Tickets</h3>\n          <AssignedTickets/>\n        </div> */}\n      </div>\n     </div>\n    </div>\n\n  );\n}\n\nexport default Home;\n","/Users/amymathews/Desktop/TicketingManagementSystem-UI/src/StaffStudentHome.tsx",["128","129","130","131","132","133"],[],"import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TicketForm from './TicketForm';\nimport OpenTickets from './OpenTickets';\nimport Login from './login';\nimport { useNavigate } from 'react-router-dom';\nimport AssignedTickets from './AssignedTickets';\n\nconst Home = () => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  // Your login logic here\n  const handleLogin = () => {\n    // Implement your login logic here (e.g., check credentials)\n    // If login is successful, set 'isLoggedIn' to true\n    setIsLoggedIn(true);\n  };\n\n  class Ticket {\n    public studentID: string | undefined;\n    public studentName: string | undefined;\n    public ticketType: string | undefined;\n    public description: string | undefined;\n    public location: string | undefined;\n    public currentDate: Date | undefined;\n  }\n\n  const navigate = useNavigate();\n  const [tickets, setTickets] = useState<Ticket[]>([]); \n\n  const handleTicketSubmit = (ticket:Ticket) => {\n    setTickets((prevTickets:Ticket[]) => [...prevTickets, ticket]);\n};\n\nconst handleLogout = () => {\n  // Clear authentication-related data (e.g., tokens, session data)\n  // For example, remove the accessToken cookie:\n  document.cookie = 'accessToken=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';\n\n  // Redirect to the login page (or any other destination)\n  navigate('/');\n};\n  return (\n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //     {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n    //     <p>\n    //       Edit <code>src/App.tsx</code> and save to reload.\n    //     </p>\n\n    //   </header>\n    // </div>\n\n    \n    <div className=\"App\">\n\n      <header style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n      <h1 style={{ textAlign: 'center', flex: '1' }} onClick = {() => navigate(\"/\")}>ME100</h1>\n        <button style={{ marginRight: '10px' }} onClick = {() => navigate('/staffHome')} >Ticket History</button>\n        <button style={{ marginRight: '10px' }} onClick = {() => navigate('/staffHome')} >Staff Home</button>\n        <button style={{ marginRight: '10px' }} onClick = {() => handleLogout()} >Log Out</button>\n      </header>\n     <div>\n      <p style={{ fontSize: '1.5rem' }}>\n                Welcome to ME 100 OH Queue. Please make a ticket on the queue\n      </p>\n      <TicketForm/>\n      <div className=\"ticket-list-container\">\n        <div className=\"ticket-list left-half\">\n          <h3>Open Tickets</h3>\n          <OpenTickets/>\n        </div>\n        <div className=\"ticket-list right-half\">\n          <h3>Assigned Tickets</h3>\n          <AssignedTickets/>\n          {/* Display a list of assigned tickets here */}\n        </div>\n      </div>\n     </div>\n    </div>\n\n  );\n}\n\nexport default Home;\n","/Users/amymathews/Desktop/TicketingManagementSystem-UI/src/AuthProvider.tsx",[],[],"/Users/amymathews/Desktop/TicketingManagementSystem-UI/src/ProtectedRoute.tsx",["134","135","136","137"],[],"// ProtectedRoute.js\nimport React from 'react';\nimport { Navigate, Route, useNavigate } from 'react-router-dom';\nimport { useAuth } from './AuthProvider';\nimport Login from './login';\nimport StaffHome from './StaffHome';\n\n\nconst ProtectedRoute = () => {\n  const { isAuthenticated } = useAuth();\n  const navigate = useNavigate();\n  const accessTokenRow = document.cookie\n    .split('; ')\n    .find(row => row.startsWith('accessToken='));\n\n  let accessToken;\n  if (accessTokenRow) {\n    accessToken = accessTokenRow.split('=')[1];\n  }\n  console.log(accessToken);\n  if (accessToken) {\n    return <StaffHome/>;\n  } else {\n    // Redirect to the login page if not authenticated\n    return <Login/>;\n  }\n};\n\nexport default ProtectedRoute;","/Users/amymathews/Desktop/TicketingManagementSystem-UI/src/login.tsx",["138"],[],"// Login.js\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from './AuthProvider';\n\n\nconst API_URL = process.env.REACT_APP_API_URL;\n\nconst Login = () => {\n  // State to manage user input\n\n  const { isAuthenticated, setIsAuthenticated } = useAuth();\n  class LoginStatus {\n    public status: Number ;\n    public data: LoginData;\n    public description: string;\n    public error: Object ;\n\n    constructor(status: number, data: LoginData, description: string, error: any) {\n        this.status = status;\n        this.data = data;\n        this.description = description;\n        this.error = error; // Include this line to set the error property\n      }\n  }\n\n  class LoginData {\n    public loginStatus: String;\n    public token: String;\n\n    constructor(loginStatus: String, token: String) {\n      this.loginStatus = loginStatus;\n      this.token = token;\n    }\n  }\n\n\n\n  const navigate = useNavigate();\n\n  const [loginStatus, setLoginStatus] = useState<LoginStatus>();\n\n  const [loginData, setLoginData] = useState({\n    username: '', // Initialize with an empty string\n    password: '', // Initialize with an empty string\n  });\n\n  const { username, password } = loginData;\n\n  const setLoginCookie = (accessToken: String) => {\n    const expirationDate = new Date();\n    expirationDate.setDate(expirationDate.getDate() + 7); // Cookie expiration in 7 days\n  \n    document.cookie = `accessToken=${accessToken}; expires=${expirationDate.toUTCString()}; path=/`;\n  };\n\n  // Handle form submission\n  const handleSubmit = (e: { preventDefault: () => void; }) => {\n    e.preventDefault();\n    const login = `${API_URL}/login`;\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(loginData), \n      };\n  \n  \n      // Make the API request\n    fetch(login, requestOptions)\n    .then((response) => {\n        if (!response.ok) {\n        throw new Error('Network response was not ok');\n        }\n        return response.json();\n    })\n    .then((data) => {\n        // Handle the API response data here\n        const loginStatus = new LoginStatus(\n        data.status,\n        new LoginData(data.data.loginStatus, data.data.token),\n        data.description,\n        data.error\n        );\n        setLoginStatus(loginStatus);\n        //document.cookie = `token=${data.token}; secure; samesite=strict`;\n        if (loginStatus.data.loginStatus === 'succeed') {\n            setLoginCookie(loginStatus.data.token);\n            setIsAuthenticated(true);\n            navigate('/staffHome'); // Redirect to StaffScreen\n        }\n    })\n    .catch((error) => {\n        // Handle any errors that occurred during the fetch.\n        console.error('Fetch error:', error);\n    });\n\n\n\n    // Add your login logic here\n  };\n\n\n\n  return (\n    <div className=\"login-container\">\n      <h1 style={{ textAlign: 'center', flex: '1' }} onClick = {() => navigate(\"/\")}>ME100</h1>\n      <h2>Login</h2>\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label htmlFor=\"username\">Username:</label>\n          <input\n            type=\"text\"\n            id=\"username\"\n            style={{ width: '150px', height: '10px' }}\n            value={username}\n            onChange={(e) => setLoginData({ ...loginData, username: e.target.value })}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"password\">Password:</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            style={{ width: '160px', height: '20px' }}\n            value={password}\n            onChange={(e) => setLoginData({ ...loginData, password: e.target.value })}\n          />\n        </div>\n        <button type=\"submit\" style = {{margin: 10}}>Login</button>\n      </form>\n\n      {loginStatus && (\n        <div className={loginStatus.data.loginStatus === 'succeed' ? 'success-message' : 'error-message'}>\n          {loginStatus.data.loginStatus === 'succeed' ? 'Login succeeded' : 'Login failed'}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Login;\n","/Users/amymathews/Desktop/TicketingManagementSystem-UI/src/TicketForm.tsx",["139","140","141","142"],[],"// src/components/TicketForm.tsx\nimport React, { useEffect, useState } from 'react';\nimport './App.css'; // Import the CSS file for styling\nconst API_URL = process.env.REACT_APP_API_URL;\nconsole.log(API_URL);\n// Define the Ticket interface\ninterface Ticket {\n  studentId: string;\n  studentName: string;\n  ticketType: string;\n  description: string;\n  location: string;\n}\n\ninterface TicketFormProps {\n  onTicketSubmit: () => void;  // Callback function to trigger a re-render\n}\n\nconst TicketForm: React.FC = () => {\n  const [ticketData, setTicketData] = useState<Ticket>({\n    studentId: '',\n    studentName: '',\n    ticketType: '',\n    description: '',\n    location: '',\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    // Create a new Ticket object when the form is submitted\n    const newTicket: Ticket = {\n      ...ticketData,\n    };\n\n    // Handle form submission, e.g., send data to a server or perform any necessary actions.\n    console.log('Form submitted with data:', newTicket);\n\n    // Clear the form fields\n    setTicketData({\n      studentId: '',\n      studentName: '',\n      ticketType: '',\n      description: '',\n      location: '',\n    });\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n\n    // Update the corresponding field in the ticketData state\n    setTicketData((prevData) => ({\n      ...prevData,\n      [name]: value,\n    }));\n  };\n\n  const jsonData = \n    {\n      id: 1,\n      name: 'Test name',\n    }\n\n  const [isSubmitClicked, setIsSubmitClicked] = useState(false);\n\n  const handleButtonClick = () => {\n    setIsSubmitClicked(true);\n    const createTicket = `${API_URL}/ticket/createTicket`; // Replace with your API URL\n\n\n    // Define the options for the fetch request, including method, headers, and body.\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(ticketData),\n    };\n\n    console.log(ticketData)\n\n    // Make the API request\n    fetch(createTicket, requestOptions)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      })\n      .then((data) => {\n        // Handle the API response data here\n        console.log(data);\n        window.location.reload();\n      })\n      .catch((error) => {\n        // Handle any errors that occurred during the fetch.\n        console.error('Fetch error:', error);\n      });\n  };\n\n  return (\n    <div className=\"ticket-form-container\">\n      <h2>Create a Ticket</h2>\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"studentId\">Student ID</label>\n          <input\n            type=\"text\"\n            id=\"studentId\"\n            name=\"studentId\"\n            value={ticketData.studentId}\n            onChange={handleInputChange}\n            required\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"studentName\">Student Name</label>\n          <input\n            type=\"text\"\n            id=\"studentName\"\n            name=\"studentName\"\n            value={ticketData.studentName}\n            onChange={handleInputChange}\n            required\n          />\n        </div>\n\n        <div className=\"form-group\">\n          <label htmlFor=\"ticketType\">Ticket Type</label>\n          <input\n            type=\"text\"\n            id=\"ticketType\"\n            name=\"ticketType\"\n            value={ticketData.ticketType}\n            onChange={handleInputChange}\n            required\n          />\n        </div>\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"description\">Description</label>\n          <textarea\n            id=\"description\"\n            name=\"description\"\n            value={ticketData.description}\n            onChange={handleInputChange}\n            required\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"location\">Location</label>\n          <input\n            type=\"text\"\n            id=\"location\"\n            name=\"location\"\n            value={ticketData.location}\n            onChange={handleInputChange}\n            required\n          />\n        </div>\n        <button onClick={handleButtonClick}>Submit → </button>\n      </form>\n    </div>\n  );\n};\n\nexport default TicketForm;\n","/Users/amymathews/Desktop/TicketingManagementSystem-UI/src/HomeTickets.tsx",["143","144","145"],[],"/Users/amymathews/Desktop/TicketingManagementSystem-UI/src/AssignedTickets.tsx",["146","147","148","149","150","151","152"],[],"// src/components/TicketForm.tsx\nimport React, { useEffect, useState } from 'react';\nimport './App.css'; // Import the CSS file for styling\nimport TicketList from './TicketList';\nimport AssignedTicketList from './AssignedTicketList';\n\n\nconst API_URL = process.env.REACT_APP_API_URL;\n\nconst AssignedTickets: React.FC = () => {\n\n    // Define the Ticket interface\n    class Ticket {\n      public studentID: string;\n      public studentName: string;\n      public ticketType: string;\n      public description: string;\n      public location: string;\n      public currentDate: Date;\n      public assignedDate: Date;\n    \n      constructor() {\n        this.studentID = \"\";\n        this.studentName = \"\";\n        this.ticketType =  \"\";\n        this.description = \"\";\n        this.location = \"\"\n        this.currentDate = new Date();\n        this.assignedDate = new Date();\n      }\n    }\n\n    class AssignedTicket {\n      public studentID: string;\n      public studentName: string;\n      public ticketType: string;\n      public description: string;\n      public location: string;\n      public currentDate: Date;\n      public assignedDate: Date;\n      public TA: string;\n    \n      constructor() {\n        this.studentID = \"\";\n        this.studentName = \"\";\n        this.ticketType =  \"\";\n        this.description = \"\";\n        this.location = \"\";\n        this.TA = \"\";\n        this.currentDate = new Date();\n        this.assignedDate = new Date();\n      }\n    }\n\n  const [tickets, setTickets] = useState<AssignedTicket[]>([]);\n\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n\n  \n  }\n\n  useEffect(() => {\n    // Inside this useEffect, you can make the API request\n    // using the fetch API.\n    const getAllTickets = `${API_URL}/ticket/getAllAssignedTickets`; // Replace with your API URL\n\n\n    // Define the options for the fetch request, including method, headers, and body.\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n\n    // Make the API request\n    fetch(getAllTickets)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      })\n      .then((data) => {\n        // Handle the API response data here\n        const ticketObjects = data.map((item: { studentID: string; studentName: string; ticketType: string; description: string; location: string; currentDate: string | number | Date; ta:string; }) => {\n            const ticket = new AssignedTicket();\n            ticket.studentID = item.studentID;\n            ticket.studentName = item.studentName;\n            ticket.ticketType = item.ticketType;\n            ticket.description = item.description;\n            ticket.location = item.location;\n            ticket.TA = item.ta;\n            ticket.currentDate = new Date(item.currentDate);\n            return ticket;\n          });\n          setTickets(ticketObjects);\n      })\n      .catch((error) => {\n        // Handle any errors that occurred during the fetch.\n        console.error('Fetch error:', error);\n      });\n  }, []);\n\n  return (\n    <AssignedTicketList tickets = {tickets} />\n  );\n};\n\nexport default AssignedTickets;\n","/Users/amymathews/Desktop/TicketingManagementSystem-UI/src/OpenTickets.tsx",["153","154","155","156","157"],[],"// src/components/TicketForm.tsx\nimport React, { useEffect, useState } from 'react';\nimport './App.css'; // Import the CSS file for styling\nimport TicketList from './TicketList';\n\nconst API_URL = process.env.REACT_APP_API_URL;\n\nconst OpenTickets: React.FC = () => {\n\n    // Define the Ticket interface\n    class Ticket {\n      public studentID: string;\n      public studentName: string;\n      public ticketType: string;\n      public description: string;\n      public location: string;\n      public currentDate: Date;\n  \n      constructor() {\n        this.studentID = \"\";\n        this.studentName = \"\";\n        this.ticketType =  \"\";\n        this.description = \"\";\n        this.location = \"\"\n        this.currentDate = new Date();\n      }\n  }\n\n  const [tickets, setTickets] = useState<Ticket[]>([]);\n\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n\n  \n  }\n\n  useEffect(() => {\n    // Inside this useEffect, you can make the API request\n    // using the fetch API.\n    const getAllTickets = `${API_URL}/ticket/getAllOpenTickets`; // Replace with your API URL\n\n\n    // Define the options for the fetch request, including method, headers, and body.\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n\n    // Make the API request\n    fetch(getAllTickets)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      })\n      .then((data) => {\n        // Handle the API response data here\n        const ticketObjects = data.map((item: { studentID: string; studentName: string; ticketType: string; description: string; location: string; currentDate: string | number | Date; }) => {\n            const ticket = new Ticket();\n            ticket.studentID = item.studentID;\n            ticket.studentName = item.studentName;\n            ticket.ticketType = item.ticketType;\n            ticket.description = item.description;\n            ticket.location = item.location;\n            ticket.currentDate = new Date(item.currentDate);\n            return ticket;\n          });\n          setTickets(ticketObjects);\n      })\n      .catch((error) => {\n        // Handle any errors that occurred during the fetch.\n        console.error('Fetch error:', error);\n      });\n  }, []);\n\n  return (\n    <TicketList tickets = {tickets} />\n  );\n};\n\nexport default OpenTickets;\n","/Users/amymathews/Desktop/TicketingManagementSystem-UI/src/StaffHome.tsx",["158","159","160","161","162","163"],[],"import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TicketForm from './TicketForm';\nimport OpenTickets from './OpenTickets';\nimport Login from './login';\nimport { useNavigate } from 'react-router-dom';\nimport StaffOpenTickets from './StaffOpenTickets';\nimport StaffAssignedTickets from './StaffAssignedTickets';\n\nconst StaffHome = () => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  // Your login logic here\n  const handleLogin = () => {\n    // Implement your login logic here (e.g., check credentials)\n    // If login is successful, set 'isLoggedIn' to true\n    setIsLoggedIn(true);\n  };\n\n  const handleLogout = () => {\n    // Clear authentication-related data (e.g., tokens, session data)\n    // For example, remove the accessToken cookie:\n    document.cookie = 'accessToken=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';\n\n    // Redirect to the login page (or any other destination)\n    navigate('/');\n  };\n\n  const navigate = useNavigate();\n\n\n  return (\n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //     {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n    //     <p>\n    //       Edit <code>src/App.tsx</code> and save to reload.\n    //     </p>\n\n    //   </header>\n    // </div>\n\n    \n    <div className=\"App\">\n\n      <header style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n      <h1 style={{ textAlign: 'center', flex: '1' }} onClick = {() => navigate(\"/staffHome\")}>ME100</h1>\n        <button style={{ marginRight: '10px' }} onClick = {() => navigate('/staffHome')} >Ticket History</button>\n        <button style={{ marginRight: '10px' }} onClick = {() => navigate('/staffStudentHome')} >Student Home</button>\n        <button style={{ marginRight: '10px' }} onClick = {() => handleLogout()} >Log Out</button>\n      </header>\n     <div>\n      <p style={{ fontSize: '1.5rem' }}>\n                Welcome to ME 100 OH Queue. Please make a ticket on the queue\n      </p>\n      <div className=\"ticket-list-container\">\n        <div className=\"ticket-list left-half\">\n          <h3>Open Tickets</h3>\n          <StaffOpenTickets/>\n        </div>\n        <div className=\"ticket-list right-half\">\n          <h3>Assigned Tickets</h3>\n          <StaffAssignedTickets/>\n          {/* Display a list of assigned tickets here */}\n        </div>\n      </div>\n     </div>\n    </div>\n\n  );\n}\n\nexport default StaffHome;\n","/Users/amymathews/Desktop/TicketingManagementSystem-UI/src/AssignedTicketList.tsx",["164","165","166","167","168","169","170","171"],[],"/Users/amymathews/Desktop/TicketingManagementSystem-UI/src/TicketList.tsx",["172","173","174","175","176","177","178","179","180"],[],"/Users/amymathews/Desktop/TicketingManagementSystem-UI/src/StaffOpenTickets.tsx",["181","182","183","184","185"],[],"// src/components/TicketForm.tsx\nimport React, { useEffect, useState } from 'react';\nimport './App.css'; // Import the CSS file for styling\nimport StaffTicketList from './StaffOpenTicketList';\n\nconst API_URL = process.env.REACT_APP_API_URL;\nconst StaffOpenTickets: React.FC = () => {\n\n    // Define the Ticket interface\n    class Ticket {\n      public studentID: string;\n      public studentName: string;\n      public ticketType: string;\n      public description: string;\n      public location: string;\n      public currentDate: Date;\n      public assignedDate: Date;\n    \n      constructor() {\n        this.studentID = \"\";\n        this.studentName = \"\";\n        this.ticketType =  \"\";\n        this.description = \"\";\n        this.location = \"\"\n        this.currentDate = new Date();\n        this.assignedDate = new Date();\n      }\n    }\n\n  const [tickets, setTickets] = useState<Ticket[]>([]);\n\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n\n  \n  }\n\n  useEffect(() => {\n    // Inside this useEffect, you can make the API request\n    // using the fetch API.\n    const getAllTickets = `${API_URL}/ticket/getAllOpenTickets`; // Replace with your API URL\n\n\n    // Define the options for the fetch request, including method, headers, and body.\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n\n    // Make the API request\n    fetch(getAllTickets)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      })\n      .then((data) => {\n        // Handle the API response data here\n        const ticketObjects = data.map((item: { studentID: string; studentName: string; ticketType: string; description: string; location: string; currentDate: string | number | Date; }) => {\n            const ticket = new Ticket();\n            ticket.studentID = item.studentID;\n            ticket.studentName = item.studentName;\n            ticket.ticketType = item.ticketType;\n            ticket.description = item.description;\n            ticket.location = item.location;\n            ticket.currentDate = new Date(item.currentDate);\n            return ticket;\n          });\n          setTickets(ticketObjects);\n      })\n      .catch((error) => {\n        // Handle any errors that occurred during the fetch.\n        console.error('Fetch error:', error);\n      });\n  }, []);\n\n  return (\n    <StaffTicketList tickets = {tickets}/>\n  );\n};\n\nexport default StaffOpenTickets;\n","/Users/amymathews/Desktop/TicketingManagementSystem-UI/src/StaffAssignedTickets.tsx",["186","187","188","189","190","191","192"],[],"// src/components/TicketForm.tsx\nimport React, { useEffect, useState } from 'react';\nimport './App.css'; // Import the CSS file for styling\nimport StaffTicketList from './StaffOpenTicketList';\nimport StaffTicketAssignedList from './StaffAssignedTicketList';\n\nconst API_URL = process.env.REACT_APP_API_URL;\nconst StaffAssignedTickets: React.FC = () => {\n\n    // Define the Ticket interface\n    class Ticket {\n      public studentID: string;\n      public studentName: string;\n      public ticketType: string;\n      public description: string;\n      public location: string;\n      public currentDate: Date;\n      public assignedDate: Date;\n    \n      constructor() {\n        this.studentID = \"\";\n        this.studentName = \"\";\n        this.ticketType =  \"\";\n        this.description = \"\";\n        this.location = \"\"\n        this.currentDate = new Date();\n        this.assignedDate = new Date();\n      }\n    }\n\n    class AssignedTicket {\n      public studentID: string;\n      public studentName: string;\n      public ticketType: string;\n      public description: string;\n      public location: string;\n      public currentDate: Date;\n      public assignedDate: Date;\n      public TA: string;\n    \n      constructor() {\n        this.studentID = \"\";\n        this.studentName = \"\";\n        this.ticketType =  \"\";\n        this.description = \"\";\n        this.location = \"\";\n        this.TA = \"\";\n        this.currentDate = new Date();\n        this.assignedDate = new Date();\n      }\n    }\n\n  const [tickets, setTickets] = useState<AssignedTicket[]>([]);\n  console.log(tickets)\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n\n  \n  }\n\n  useEffect(() => {\n    // Inside this useEffect, you can make the API request\n    // using the fetch API.\n    const getAllTickets = `${API_URL}/ticket/getAllAssignedTickets`; // Replace with your API URL\n\n\n    // Define the options for the fetch request, including method, headers, and body.\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n\n    // Make the API request\n    fetch(getAllTickets)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      })\n      .then((data) => {\n        console.log(data)\n        // Handle the API response data here\n        const ticketObjects = data.map((item: { studentID: string; studentName: string; ticketType: string; description: string; location: string; currentDate: Date; assignedDate: Date; ta:string;}) => {\n            const ticket = new AssignedTicket();\n            ticket.studentID = item.studentID;\n            ticket.studentName = item.studentName;\n            ticket.ticketType = item.ticketType;\n            ticket.description = item.description;\n            ticket.location = item.location;\n            ticket.currentDate = new Date(item.currentDate);\n            ticket.assignedDate = new Date(item.assignedDate);\n            ticket.TA = item.ta;\n            return ticket;\n          });\n          setTickets(ticketObjects);\n      })\n      .catch((error) => {\n        // Handle any errors that occurred during the fetch.\n        console.error('Fetch error:', error);\n      });\n  }, []);\n\n  return (\n    <StaffTicketAssignedList tickets = {tickets}/>\n  );\n};\n\nexport default StaffAssignedTickets;\n","/Users/amymathews/Desktop/TicketingManagementSystem-UI/src/StaffAssignedTicketList.tsx",["193","194","195","196","197","198"],[],"import React from 'react';\n\nconst API_URL = process.env.REACT_APP_API_URL;\nclass Ticket {\n  public studentID: string;\n  public studentName: string;\n  public ticketType: string;\n  public description: string;\n  public location: string;\n  public currentDate: Date;\n  public assignedDate: Date;\n\n  constructor() {\n    this.studentID = \"\";\n    this.studentName = \"\";\n    this.ticketType =  \"\";\n    this.description = \"\";\n    this.location = \"\"\n    this.currentDate = new Date();\n    this.assignedDate = new Date();\n  }\n}\nclass AssignedTicket {\n  public studentID: string;\n  public studentName: string;\n  public ticketType: string;\n  public description: string;\n  public location: string;\n  public currentDate: Date;\n  public assignedDate: Date;\n  public TA: string;\n\n  constructor() {\n    this.studentID = \"\";\n    this.studentName = \"\";\n    this.ticketType =  \"\";\n    this.description = \"\";\n    this.location = \"\";\n    this.TA = \"\";\n    this.currentDate = new Date();\n    this.assignedDate = new Date();\n  }\n}\n\ninterface TicketListProps {\n  tickets: AssignedTicket[];\n}\n\n\n// Handle form submission\nconst handleAssignedTicket = (ticket: Ticket) => {\n  \n  const assginedTicket = `${API_URL}/ticket/assignTicket`;\n\n  const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(ticket), \n    };\n\n\n    // Make the API request\n  fetch(assginedTicket, requestOptions)\n  .then((response) => {\n      if (!response.ok) {\n      throw new Error('Network response was not ok');\n      }\n      return;\n  })\n  .catch((error) => {\n      // Handle any errors that occurred during the fetch.\n      console.error('Fetch error:', error);\n  });\n\n\n  // Add your login logic here\n};\n\nfunction formatDate(date:Date) {\n  const day = date.getDate();\n  const month = date.getMonth() + 1; // Months are zero-indexed\n  const year = date.getFullYear();\n  const hours = date.getHours();\n  const minutes = date.getMinutes();\n  const seconds = date.getSeconds();\n  const currentDate = new Date();\n  const timeDifference = currentDate.getTime() - date.getTime(); // Difference in milliseconds\n  const Totalhours = Math.floor(timeDifference / 3600000); // Convert to seconds\n  const Totalminutes = Math.floor(timeDifference % 3600000 / 60000); // Convert to seconds\n  const Totalseconds = Math.floor(timeDifference %  60000/ 1000); // Convert to seconds\n\n  return `${month}/${day}/${year}`;\n}\n\nfunction formatTime(date:Date) {\n  const currentDate = new Date();\n  const timeDifference = currentDate.getTime() - date.getTime(); // Difference in milliseconds\n  const Totalhours = Math.floor(timeDifference / 3600000); // Convert to seconds\n  const Totalminutes = Math.floor(timeDifference % 3600000 / 60000); // Convert to seconds\n  const Totalseconds = Math.floor(timeDifference %  60000 / 1000); // Convert to seconds\n\n  return `${Totalhours} Hours, ${Totalminutes} Minutes, ${Totalseconds} Seconds ago`;\n}\n\nfunction formatAssignedTime(assignedDate:Date) {\n  const currentDate = new Date();\n  const timeDifference = currentDate.getTime() - assignedDate.getTime(); // Difference in milliseconds\n  const Totalhours = Math.floor(timeDifference / 3600000); // Convert to seconds\n  const Totalminutes = Math.floor(timeDifference % 3600000 / 60000); // Convert to seconds\n  const Totalseconds = Math.floor(timeDifference %  60000 / 1000); // Convert to seconds\n\n  return `${Totalhours} Hours, ${Totalminutes} Minutes, ${Totalseconds} Seconds ago`;\n}\n\n  // Handle form submission\n  const handleDeleteTicket = (ticket: Ticket) => {\n    const deleteTicket = `${API_URL}/ticket/closeTicket`;\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(ticket), \n      };\n  \n  \n      // Make the API request\n    fetch(deleteTicket, requestOptions)\n    .then((response) => {\n        if (!response.ok) {\n        throw new Error('Network response was not ok');\n        }\n        return;\n    })\n    .catch((error) => {\n        // Handle any errors that occurred during the fetch.\n        console.error('Fetch error:', error);\n    });\n\n\n    // Add your login logic here\n  };\n\n\n\nconst StaffTicketAssignedList: React.FC<TicketListProps> = ({ tickets }) => {\n  const sortedTickets = [...tickets].sort((a, b) => a.currentDate.getTime() - b.currentDate.getTime());\n  return (\n    <div className=\"ticket-form-container\">\n        {sortedTickets.map((ticket, index) => (\n                <li key={ticket.studentID}>\n                <div className=\"ticket\">\n                    <strong>{index+1}. {ticket.studentName}</strong>\n                    <p>Student ID: {ticket.studentID}</p>\n                    <p>Location: {ticket.location}</p>\n                    <p>Ticket Type: {ticket.ticketType}</p>\n                    <p>Description: {ticket.description}</p>\n                    <p>Created Date: {formatDate(ticket.currentDate)}</p>\n                    <p>Created Time: {formatTime(ticket.currentDate)}</p>\n                    <p>Assigned Time: {formatAssignedTime(ticket.assignedDate)}</p>\n                    <p>TA: {ticket.TA}</p>\n                    <div className=\"ticket-buttons\">\n                        <button className=\"assign-button\" onClick={()=>handleAssignedTicket(ticket)}>Open Ticket</button>\n                        <button className=\"edit-button\" onClick={()=>handleAssignedTicket(ticket)}>Edit Ticket</button>\n                        <button className=\"delete-button\" onClick={()=>handleDeleteTicket(ticket)}>Close Ticket</button>\n                    </div>\n                </div>\n                </li>\n        ))}\n    </div>\n  );\n};\n\nexport default StaffTicketAssignedList;\n","/Users/amymathews/Desktop/TicketingManagementSystem-UI/src/StaffOpenTicketList.tsx",["199","200","201","202","203","204"],[],"import React from 'react';\n\nconst API_URL = process.env.REACT_APP_API_URL;\nclass Ticket {\n  public studentID: string;\n  public studentName: string;\n  public ticketType: string;\n  public description: string;\n  public location: string;\n  public currentDate: Date;\n  public assignedDate: Date;\n\n  constructor() {\n    this.studentID = \"\";\n    this.studentName = \"\";\n    this.ticketType =  \"\";\n    this.description = \"\";\n    this.location = \"\"\n    this.currentDate = new Date();\n    this.assignedDate = new Date();\n  }\n}\n\nclass AssignRequest {\n  public studentID: string;\n  public studentName: string;\n  public ticketType: string;\n  public description: string;\n  public location: string;\n  public currentDate: Date;\n  public assignedDate: Date;\n  public token: string;\n\n  constructor() {\n    this.studentID = \"\";\n    this.studentName = \"\";\n    this.ticketType =  \"\";\n    this.description = \"\";\n    this.location = \"\";\n    this.token = \"\";\n    this.currentDate = new Date();\n    this.assignedDate = new Date();\n  }\n}\n\ninterface TicketListProps {\n  tickets: Ticket[];\n}\n\n\n// Handle form submission\nconst handleAssignedTicket = (ticket: Ticket) => {\n  const accessTokenRow = document.cookie.split('; ').find(row => row.startsWith('accessToken='));\n\n  let accessToken;\n  if (accessTokenRow) {\n  accessToken = accessTokenRow.split('=')[1];\n  }\nconsole.log(accessToken);\n  if (accessTokenRow) {\n  accessToken = accessTokenRow.split('=')[1];\n  console.log(accessToken);\n  const assignTicket = `${API_URL}/ticket/assignTicket`;\n  const assignRequest = new AssignRequest();\n   assignRequest.studentID = ticket.studentID;\n   assignRequest.studentName = ticket.studentName;\n   assignRequest.ticketType = ticket.ticketType;\n   assignRequest.description = ticket.description;\n   assignRequest.location = ticket.location;\n   assignRequest.token = accessToken;\n    console.log(assignRequest);\n  const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(assignRequest), \n    };\n\n\n    // Make the API request\n  fetch(assignTicket, requestOptions)\n  .then((response) => {\n      if (!response.ok) {\n      throw new Error('Network response was not ok');\n      }\n      window.location.reload();\n      return;\n  })\n  .catch((error) => {\n      // Handle any errors that occurred during the fetch.\n      console.error('Fetch error:', error);\n  });\n} else {\n  console.error('Access token not found.');\n}\n\n\n\n  // Add your login logic here\n};\n\n\n  // Handle form submission\n  const handleDeleteTicket = (ticket: Ticket) => {\n    const deleteTicket = `${API_URL}/ticket/deleteTicket`;\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(ticket), \n      };\n  \n  \n      // Make the API request\n    fetch(deleteTicket, requestOptions)\n    .then((response) => {\n        if (!response.ok) {\n        throw new Error('Network response was not ok');\n        }\n        window.location.reload();\n        return;\n    })\n    .catch((error) => {\n        // Handle any errors that occurred during the fetch.\n        console.error('Fetch error:', error);\n    });\n\n\n    // Add your login logic here\n  };\n\n  function formatDate(date:Date) {\n    const day = date.getDate();\n    const month = date.getMonth() + 1; // Months are zero-indexed\n    const year = date.getFullYear();\n    const hours = date.getHours();\n    const minutes = date.getMinutes();\n    const seconds = date.getSeconds();\n    const currentDate = new Date();\n    const timeDifference = currentDate.getTime() - date.getTime(); // Difference in milliseconds\n    const Totalhours = Math.floor(timeDifference / 3600000); // Convert to seconds\n    const Totalminutes = Math.floor(timeDifference % 3600000 / 60000); // Convert to seconds\n    const Totalseconds = Math.floor(timeDifference %  60000/ 1000); // Convert to seconds\n  \n    return `${month}/${day}/${year}`;\n  }\n  \n  function formatTime(date:Date) {\n    const currentDate = new Date();\n    const timeDifference = currentDate.getTime() - date.getTime(); // Difference in milliseconds\n    const Totalhours = Math.floor(timeDifference / 3600000); // Convert to seconds\n    const Totalminutes = Math.floor(timeDifference % 3600000 / 60000); // Convert to seconds\n    const Totalseconds = Math.floor(timeDifference %  60000 / 1000); // Convert to seconds\n  \n    return `${Totalhours} Hours, ${Totalminutes} Minutes, ${Totalseconds} Seconds ago`;\n  }\n\n\n\nconst StaffTicketList: React.FC<TicketListProps> = ({ tickets }) => {\n  const sortedTickets = [...tickets].sort((a, b) => a.currentDate.getTime() - b.currentDate.getTime());\n  return (\n    <div className=\"ticket-form-container\">\n        {sortedTickets.map((ticket, index) => (\n                <li key={ticket.studentID}>\n                <div className=\"ticket\">\n                <strong>{index+1}. {ticket.studentName}</strong>\n                    <p>Student ID: {ticket.studentID}</p>\n                    <p>Location: {ticket.location}</p>\n                    <p>Ticket Type: {ticket.ticketType}</p>\n                    <p>Description: {ticket.description}</p>\n                    <p>Created Date: {formatDate(ticket.currentDate)}</p>\n                    <p>Created Time: {formatTime(ticket.currentDate)}</p>\n                    <div className=\"ticket-buttons\">\n                        <button className=\"assign-button\" onClick={()=>handleAssignedTicket(ticket)}>Assign Ticket</button>\n                        <button className=\"edit-button\">Edit Ticket</button>\n                        <button className=\"delete-button\" onClick={()=>handleDeleteTicket(ticket)}>Delete Ticket</button>\n                    </div>\n                </div>\n                </li>\n        ))}\n    </div>\n  );\n};\n\nexport default StaffTicketList;\n",{"ruleId":"205","replacedBy":"206"},{"ruleId":"207","severity":1,"message":"208","line":1,"column":17,"nodeType":"209","messageId":"210","endLine":1,"endColumn":25},{"ruleId":"207","severity":1,"message":"211","line":2,"column":8,"nodeType":"209","messageId":"210","endLine":2,"endColumn":12},{"ruleId":"207","severity":1,"message":"212","line":4,"column":8,"nodeType":"209","messageId":"210","endLine":4,"endColumn":18},{"ruleId":"207","severity":1,"message":"213","line":5,"column":8,"nodeType":"209","messageId":"210","endLine":5,"endColumn":19},{"ruleId":"207","severity":1,"message":"214","line":8,"column":8,"nodeType":"209","messageId":"210","endLine":8,"endColumn":17},{"ruleId":"207","severity":1,"message":"215","line":9,"column":42,"nodeType":"209","messageId":"210","endLine":9,"endColumn":48},{"ruleId":"207","severity":1,"message":"216","line":9,"column":58,"nodeType":"209","messageId":"210","endLine":9,"endColumn":69},{"ruleId":"207","severity":1,"message":"217","line":11,"column":24,"nodeType":"209","messageId":"210","endLine":11,"endColumn":31},{"ruleId":"207","severity":1,"message":"211","line":2,"column":8,"nodeType":"209","messageId":"210","endLine":2,"endColumn":12},{"ruleId":"207","severity":1,"message":"213","line":5,"column":8,"nodeType":"209","messageId":"210","endLine":5,"endColumn":19},{"ruleId":"207","severity":1,"message":"218","line":6,"column":8,"nodeType":"209","messageId":"210","endLine":6,"endColumn":13},{"ruleId":"207","severity":1,"message":"219","line":8,"column":8,"nodeType":"209","messageId":"210","endLine":8,"endColumn":23},{"ruleId":"207","severity":1,"message":"220","line":12,"column":10,"nodeType":"209","messageId":"210","endLine":12,"endColumn":20},{"ruleId":"207","severity":1,"message":"221","line":15,"column":9,"nodeType":"209","messageId":"210","endLine":15,"endColumn":20},{"ruleId":"207","severity":1,"message":"222","line":31,"column":10,"nodeType":"209","messageId":"210","endLine":31,"endColumn":17},{"ruleId":"207","severity":1,"message":"223","line":33,"column":9,"nodeType":"209","messageId":"210","endLine":33,"endColumn":27},{"ruleId":"207","severity":1,"message":"211","line":2,"column":8,"nodeType":"209","messageId":"210","endLine":2,"endColumn":12},{"ruleId":"207","severity":1,"message":"218","line":6,"column":8,"nodeType":"209","messageId":"210","endLine":6,"endColumn":13},{"ruleId":"207","severity":1,"message":"220","line":11,"column":10,"nodeType":"209","messageId":"210","endLine":11,"endColumn":20},{"ruleId":"207","severity":1,"message":"221","line":14,"column":9,"nodeType":"209","messageId":"210","endLine":14,"endColumn":20},{"ruleId":"207","severity":1,"message":"222","line":30,"column":10,"nodeType":"209","messageId":"210","endLine":30,"endColumn":17},{"ruleId":"207","severity":1,"message":"223","line":32,"column":9,"nodeType":"209","messageId":"210","endLine":32,"endColumn":27},{"ruleId":"207","severity":1,"message":"224","line":3,"column":10,"nodeType":"209","messageId":"210","endLine":3,"endColumn":18},{"ruleId":"207","severity":1,"message":"225","line":3,"column":20,"nodeType":"209","messageId":"210","endLine":3,"endColumn":25},{"ruleId":"207","severity":1,"message":"226","line":10,"column":11,"nodeType":"209","messageId":"210","endLine":10,"endColumn":26},{"ruleId":"207","severity":1,"message":"227","line":11,"column":9,"nodeType":"209","messageId":"210","endLine":11,"endColumn":17},{"ruleId":"207","severity":1,"message":"226","line":12,"column":11,"nodeType":"209","messageId":"210","endLine":12,"endColumn":26},{"ruleId":"207","severity":1,"message":"228","line":2,"column":17,"nodeType":"209","messageId":"210","endLine":2,"endColumn":26},{"ruleId":"207","severity":1,"message":"229","line":15,"column":11,"nodeType":"209","messageId":"210","endLine":15,"endColumn":26},{"ruleId":"207","severity":1,"message":"230","line":59,"column":9,"nodeType":"209","messageId":"210","endLine":59,"endColumn":17},{"ruleId":"207","severity":1,"message":"231","line":65,"column":10,"nodeType":"209","messageId":"210","endLine":65,"endColumn":25},{"ruleId":"207","severity":1,"message":"228","line":1,"column":17,"nodeType":"209","messageId":"210","endLine":1,"endColumn":26},{"ruleId":"232","severity":1,"message":"233","line":12,"column":37,"nodeType":"234","messageId":"235","endLine":12,"endColumn":39},{"ruleId":"232","severity":1,"message":"233","line":13,"column":37,"nodeType":"234","messageId":"235","endLine":13,"endColumn":39},{"ruleId":"207","severity":1,"message":"236","line":4,"column":8,"nodeType":"209","messageId":"210","endLine":4,"endColumn":18},{"ruleId":"207","severity":1,"message":"237","line":13,"column":11,"nodeType":"209","messageId":"210","endLine":13,"endColumn":17},{"ruleId":"207","severity":1,"message":"238","line":58,"column":9,"nodeType":"209","messageId":"210","endLine":58,"endColumn":26},{"ruleId":"207","severity":1,"message":"239","line":59,"column":13,"nodeType":"209","messageId":"210","endLine":59,"endColumn":17},{"ruleId":"207","severity":1,"message":"240","line":59,"column":19,"nodeType":"209","messageId":"210","endLine":59,"endColumn":24},{"ruleId":"207","severity":1,"message":"241","line":71,"column":11,"nodeType":"209","messageId":"210","endLine":71,"endColumn":25},{"ruleId":"242","severity":1,"message":"243","line":106,"column":6,"nodeType":"244","endLine":106,"endColumn":8,"suggestions":"245"},{"ruleId":"207","severity":1,"message":"238","line":32,"column":9,"nodeType":"209","messageId":"210","endLine":32,"endColumn":26},{"ruleId":"207","severity":1,"message":"239","line":33,"column":13,"nodeType":"209","messageId":"210","endLine":33,"endColumn":17},{"ruleId":"207","severity":1,"message":"240","line":33,"column":19,"nodeType":"209","messageId":"210","endLine":33,"endColumn":24},{"ruleId":"207","severity":1,"message":"241","line":45,"column":11,"nodeType":"209","messageId":"210","endLine":45,"endColumn":25},{"ruleId":"242","severity":1,"message":"246","line":79,"column":6,"nodeType":"244","endLine":79,"endColumn":8,"suggestions":"247"},{"ruleId":"207","severity":1,"message":"211","line":2,"column":8,"nodeType":"209","messageId":"210","endLine":2,"endColumn":12},{"ruleId":"207","severity":1,"message":"212","line":4,"column":8,"nodeType":"209","messageId":"210","endLine":4,"endColumn":18},{"ruleId":"207","severity":1,"message":"213","line":5,"column":8,"nodeType":"209","messageId":"210","endLine":5,"endColumn":19},{"ruleId":"207","severity":1,"message":"218","line":6,"column":8,"nodeType":"209","messageId":"210","endLine":6,"endColumn":13},{"ruleId":"207","severity":1,"message":"220","line":12,"column":10,"nodeType":"209","messageId":"210","endLine":12,"endColumn":20},{"ruleId":"207","severity":1,"message":"221","line":15,"column":9,"nodeType":"209","messageId":"210","endLine":15,"endColumn":20},{"ruleId":"207","severity":1,"message":"248","line":29,"column":10,"nodeType":"209","messageId":"210","endLine":29,"endColumn":33},{"ruleId":"207","severity":1,"message":"249","line":41,"column":10,"nodeType":"209","messageId":"210","endLine":41,"endColumn":20},{"ruleId":"207","severity":1,"message":"250","line":45,"column":9,"nodeType":"209","messageId":"210","endLine":45,"endColumn":14},{"ruleId":"207","severity":1,"message":"251","line":46,"column":9,"nodeType":"209","messageId":"210","endLine":46,"endColumn":16},{"ruleId":"207","severity":1,"message":"252","line":47,"column":9,"nodeType":"209","messageId":"210","endLine":47,"endColumn":16},{"ruleId":"207","severity":1,"message":"253","line":50,"column":9,"nodeType":"209","messageId":"210","endLine":50,"endColumn":19},{"ruleId":"207","severity":1,"message":"254","line":51,"column":9,"nodeType":"209","messageId":"210","endLine":51,"endColumn":21},{"ruleId":"207","severity":1,"message":"255","line":52,"column":9,"nodeType":"209","messageId":"210","endLine":52,"endColumn":21},{"ruleId":"207","severity":1,"message":"248","line":25,"column":10,"nodeType":"209","messageId":"210","endLine":25,"endColumn":33},{"ruleId":"207","severity":1,"message":"249","line":37,"column":10,"nodeType":"209","messageId":"210","endLine":37,"endColumn":20},{"ruleId":"207","severity":1,"message":"250","line":41,"column":9,"nodeType":"209","messageId":"210","endLine":41,"endColumn":14},{"ruleId":"207","severity":1,"message":"251","line":42,"column":9,"nodeType":"209","messageId":"210","endLine":42,"endColumn":16},{"ruleId":"207","severity":1,"message":"252","line":43,"column":9,"nodeType":"209","messageId":"210","endLine":43,"endColumn":16},{"ruleId":"207","severity":1,"message":"253","line":46,"column":9,"nodeType":"209","messageId":"210","endLine":46,"endColumn":19},{"ruleId":"207","severity":1,"message":"254","line":47,"column":9,"nodeType":"209","messageId":"210","endLine":47,"endColumn":21},{"ruleId":"207","severity":1,"message":"255","line":48,"column":9,"nodeType":"209","messageId":"210","endLine":48,"endColumn":21},{"ruleId":"207","severity":1,"message":"255","line":58,"column":9,"nodeType":"209","messageId":"210","endLine":58,"endColumn":21},{"ruleId":"207","severity":1,"message":"238","line":33,"column":9,"nodeType":"209","messageId":"210","endLine":33,"endColumn":26},{"ruleId":"207","severity":1,"message":"239","line":34,"column":13,"nodeType":"209","messageId":"210","endLine":34,"endColumn":17},{"ruleId":"207","severity":1,"message":"240","line":34,"column":19,"nodeType":"209","messageId":"210","endLine":34,"endColumn":24},{"ruleId":"207","severity":1,"message":"241","line":46,"column":11,"nodeType":"209","messageId":"210","endLine":46,"endColumn":25},{"ruleId":"242","severity":1,"message":"246","line":80,"column":6,"nodeType":"244","endLine":80,"endColumn":8,"suggestions":"256"},{"ruleId":"207","severity":1,"message":"257","line":4,"column":8,"nodeType":"209","messageId":"210","endLine":4,"endColumn":23},{"ruleId":"207","severity":1,"message":"237","line":11,"column":11,"nodeType":"209","messageId":"210","endLine":11,"endColumn":17},{"ruleId":"207","severity":1,"message":"238","line":56,"column":9,"nodeType":"209","messageId":"210","endLine":56,"endColumn":26},{"ruleId":"207","severity":1,"message":"239","line":57,"column":13,"nodeType":"209","messageId":"210","endLine":57,"endColumn":17},{"ruleId":"207","severity":1,"message":"240","line":57,"column":19,"nodeType":"209","messageId":"210","endLine":57,"endColumn":24},{"ruleId":"207","severity":1,"message":"241","line":69,"column":11,"nodeType":"209","messageId":"210","endLine":69,"endColumn":25},{"ruleId":"242","severity":1,"message":"243","line":106,"column":6,"nodeType":"244","endLine":106,"endColumn":8,"suggestions":"258"},{"ruleId":"207","severity":1,"message":"250","line":85,"column":9,"nodeType":"209","messageId":"210","endLine":85,"endColumn":14},{"ruleId":"207","severity":1,"message":"251","line":86,"column":9,"nodeType":"209","messageId":"210","endLine":86,"endColumn":16},{"ruleId":"207","severity":1,"message":"252","line":87,"column":9,"nodeType":"209","messageId":"210","endLine":87,"endColumn":16},{"ruleId":"207","severity":1,"message":"253","line":90,"column":9,"nodeType":"209","messageId":"210","endLine":90,"endColumn":19},{"ruleId":"207","severity":1,"message":"254","line":91,"column":9,"nodeType":"209","messageId":"210","endLine":91,"endColumn":21},{"ruleId":"207","severity":1,"message":"255","line":92,"column":9,"nodeType":"209","messageId":"210","endLine":92,"endColumn":21},{"ruleId":"207","severity":1,"message":"250","line":139,"column":11,"nodeType":"209","messageId":"210","endLine":139,"endColumn":16},{"ruleId":"207","severity":1,"message":"251","line":140,"column":11,"nodeType":"209","messageId":"210","endLine":140,"endColumn":18},{"ruleId":"207","severity":1,"message":"252","line":141,"column":11,"nodeType":"209","messageId":"210","endLine":141,"endColumn":18},{"ruleId":"207","severity":1,"message":"253","line":144,"column":11,"nodeType":"209","messageId":"210","endLine":144,"endColumn":21},{"ruleId":"207","severity":1,"message":"254","line":145,"column":11,"nodeType":"209","messageId":"210","endLine":145,"endColumn":23},{"ruleId":"207","severity":1,"message":"255","line":146,"column":11,"nodeType":"209","messageId":"210","endLine":146,"endColumn":23},"no-new-object",["259"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'logo' is defined but never used.","'TicketForm' is defined but never used.","'OpenTickets' is defined but never used.","'StaffHome' is defined but never used.","'Router' is defined but never used.","'useNavigate' is defined but never used.","'useAuth' is defined but never used.","'Login' is defined but never used.","'AssignedTickets' is defined but never used.","'isLoggedIn' is assigned a value but never used.","'handleLogin' is assigned a value but never used.","'tickets' is assigned a value but never used.","'handleTicketSubmit' is assigned a value but never used.","'Navigate' is defined but never used.","'Route' is defined but never used.","'isAuthenticated' is assigned a value but never used.","'navigate' is assigned a value but never used.","'useEffect' is defined but never used.","'TicketFormProps' is defined but never used.","'jsonData' is assigned a value but never used.","'isSubmitClicked' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'TicketList' is defined but never used.","'Ticket' is defined but never used.","'handleInputChange' is assigned a value but never used.","'name' is assigned a value but never used.","'value' is assigned a value but never used.","'requestOptions' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'AssignedTicket'. Either include it or remove the dependency array.","ArrayExpression",["260"],"React Hook useEffect has a missing dependency: 'Ticket'. Either include it or remove the dependency array.",["261"],"'calculateTimeDifference' is defined but never used.","'formatDate' is defined but never used.","'hours' is assigned a value but never used.","'minutes' is assigned a value but never used.","'seconds' is assigned a value but never used.","'Totalhours' is assigned a value but never used.","'Totalminutes' is assigned a value but never used.","'Totalseconds' is assigned a value but never used.",["262"],"'StaffTicketList' is defined but never used.",["263"],"no-object-constructor",{"desc":"264","fix":"265"},{"desc":"266","fix":"267"},{"desc":"266","fix":"268"},{"desc":"264","fix":"269"},"Update the dependencies array to be: [AssignedTicket]",{"range":"270","text":"271"},"Update the dependencies array to be: [Ticket]",{"range":"272","text":"273"},{"range":"274","text":"273"},{"range":"275","text":"271"},[3196,3198],"[AssignedTicket]",[2421,2423],"[Ticket]",[2516,2518],[3335,3337]]