{"ast":null,"code":"var _jsxFileName = \"/home/ec2-user/TMS/TicketingManagementSystem-UI/src/OpenTickets.tsx\",\n  _s = $RefreshSig$();\n// src/components/TicketForm.tsx\nimport React, { useEffect, useState } from 'react';\nimport './App.css'; // Import the CSS file for styling\nimport TicketList from './TicketList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OpenTickets = () => {\n  _s();\n  // Define the Ticket interface\n  class Ticket {\n    constructor() {\n      this.studentID = void 0;\n      this.studentName = void 0;\n      this.ticketType = void 0;\n      this.description = void 0;\n      this.location = void 0;\n      this.currentDate = void 0;\n      this.studentID = \"\";\n      this.studentName = \"\";\n      this.ticketType = \"\";\n      this.description = \"\";\n      this.location = \"\";\n      this.currentDate = new Date();\n    }\n  }\n  const [tickets, setTickets] = useState([]);\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n  };\n  useEffect(() => {\n    // Inside this useEffect, you can make the API request\n    // using the fetch API.\n    const getAllTickets = 'http://localhost:8080/ticket/getAllOpenTickets'; // Replace with your API URL\n\n    // Define the options for the fetch request, including method, headers, and body.\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    // Make the API request\n    fetch(getAllTickets).then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(data => {\n      // Handle the API response data here\n      const ticketObjects = data.map(item => {\n        const ticket = new Ticket();\n        ticket.studentID = item.studentID;\n        ticket.studentName = item.studentName;\n        ticket.ticketType = item.ticketType;\n        ticket.description = item.description;\n        ticket.location = item.location;\n        ticket.currentDate = new Date(item.currentDate);\n        return ticket;\n      });\n      setTickets(ticketObjects);\n    }).catch(error => {\n      // Handle any errors that occurred during the fetch.\n      console.error('Fetch error:', error);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(TicketList, {\n    tickets: tickets\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(OpenTickets, \"54iZ51D3gm8y2vmomMR+587W7ik=\");\n_c = OpenTickets;\nexport default OpenTickets;\nvar _c;\n$RefreshReg$(_c, \"OpenTickets\");","map":{"version":3,"names":["React","useEffect","useState","TicketList","jsxDEV","_jsxDEV","OpenTickets","_s","Ticket","constructor","studentID","studentName","ticketType","description","location","currentDate","Date","tickets","setTickets","handleInputChange","e","name","value","target","getAllTickets","requestOptions","method","headers","fetch","then","response","ok","Error","json","data","ticketObjects","map","item","ticket","catch","error","console","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/ec2-user/TMS/TicketingManagementSystem-UI/src/OpenTickets.tsx"],"sourcesContent":["// src/components/TicketForm.tsx\nimport React, { useEffect, useState } from 'react';\nimport './App.css'; // Import the CSS file for styling\nimport TicketList from './TicketList';\n\n\nconst OpenTickets: React.FC = () => {\n\n    // Define the Ticket interface\n    class Ticket {\n      public studentID: string;\n      public studentName: string;\n      public ticketType: string;\n      public description: string;\n      public location: string;\n      public currentDate: Date;\n  \n      constructor() {\n        this.studentID = \"\";\n        this.studentName = \"\";\n        this.ticketType =  \"\";\n        this.description = \"\";\n        this.location = \"\"\n        this.currentDate = new Date();\n      }\n  }\n\n  const [tickets, setTickets] = useState<Ticket[]>([]);\n\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n\n  \n  }\n\n  useEffect(() => {\n    // Inside this useEffect, you can make the API request\n    // using the fetch API.\n    const getAllTickets = 'http://localhost:8080/ticket/getAllOpenTickets'; // Replace with your API URL\n\n\n    // Define the options for the fetch request, including method, headers, and body.\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n\n    // Make the API request\n    fetch(getAllTickets)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      })\n      .then((data) => {\n        // Handle the API response data here\n        const ticketObjects = data.map((item: { studentID: string; studentName: string; ticketType: string; description: string; location: string; currentDate: string | number | Date; }) => {\n            const ticket = new Ticket();\n            ticket.studentID = item.studentID;\n            ticket.studentName = item.studentName;\n            ticket.ticketType = item.ticketType;\n            ticket.description = item.description;\n            ticket.location = item.location;\n            ticket.currentDate = new Date(item.currentDate);\n            return ticket;\n          });\n          setTickets(ticketObjects);\n      })\n      .catch((error) => {\n        // Handle any errors that occurred during the fetch.\n        console.error('Fetch error:', error);\n      });\n  }, []);\n\n  return (\n    <TicketList tickets = {tickets} />\n  );\n};\n\nexport default OpenTickets;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,WAAW,CAAC,CAAC;AACpB,OAAOC,UAAU,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGtC,MAAMC,WAAqB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEhC;EACA,MAAMC,MAAM,CAAC;IAQXC,WAAWA,CAAA,EAAG;MAAA,KAPPC,SAAS;MAAA,KACTC,WAAW;MAAA,KACXC,UAAU;MAAA,KACVC,WAAW;MAAA,KACXC,QAAQ;MAAA,KACRC,WAAW;MAGhB,IAAI,CAACL,SAAS,GAAG,EAAE;MACnB,IAAI,CAACC,WAAW,GAAG,EAAE;MACrB,IAAI,CAACC,UAAU,GAAI,EAAE;MACrB,IAAI,CAACC,WAAW,GAAG,EAAE;MACrB,IAAI,CAACC,QAAQ,GAAG,EAAE;MAClB,IAAI,CAACC,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC;IAC/B;EACJ;EAEA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAW,EAAE,CAAC;EAGpD,MAAMiB,iBAAiB,GAAIC,CAA4D,IAAK;IAC1F,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGF,CAAC,CAACG,MAAM;EAGlC,CAAC;EAEDtB,SAAS,CAAC,MAAM;IACd;IACA;IACA,MAAMuB,aAAa,GAAG,gDAAgD,CAAC,CAAC;;IAGxE;IACA,MAAMC,cAAc,GAAG;MACrBC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC;;IAGD;IACAC,KAAK,CAACJ,aAAa,CAAC,CACjBK,IAAI,CAAEC,QAAQ,IAAK;MAClB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MACA,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,CACDJ,IAAI,CAAEK,IAAI,IAAK;MACd;MACA,MAAMC,aAAa,GAAGD,IAAI,CAACE,GAAG,CAAEC,IAAiJ,IAAK;QAClL,MAAMC,MAAM,GAAG,IAAI9B,MAAM,CAAC,CAAC;QAC3B8B,MAAM,CAAC5B,SAAS,GAAG2B,IAAI,CAAC3B,SAAS;QACjC4B,MAAM,CAAC3B,WAAW,GAAG0B,IAAI,CAAC1B,WAAW;QACrC2B,MAAM,CAAC1B,UAAU,GAAGyB,IAAI,CAACzB,UAAU;QACnC0B,MAAM,CAACzB,WAAW,GAAGwB,IAAI,CAACxB,WAAW;QACrCyB,MAAM,CAACxB,QAAQ,GAAGuB,IAAI,CAACvB,QAAQ;QAC/BwB,MAAM,CAACvB,WAAW,GAAG,IAAIC,IAAI,CAACqB,IAAI,CAACtB,WAAW,CAAC;QAC/C,OAAOuB,MAAM;MACf,CAAC,CAAC;MACFpB,UAAU,CAACiB,aAAa,CAAC;IAC7B,CAAC,CAAC,CACDI,KAAK,CAAEC,KAAK,IAAK;MAChB;MACAC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACtC,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEnC,OAAA,CAACF,UAAU;IAACc,OAAO,EAAIA;EAAQ;IAAAyB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAEtC,CAAC;AAACtC,EAAA,CA5EID,WAAqB;AAAAwC,EAAA,GAArBxC,WAAqB;AA8E3B,eAAeA,WAAW;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}